@model HomeVm

@{
    ViewData["Title"] = "SD Generator Client";
}

<div class="min-h-screen flex flex-col bg-zinc-100 dark:bg-zinc-800 text-zinc-900 dark:text-white transition-all duration-300">
    <div class="flex flex-row flex-grow">

        <aside id="default-sidebar" class="w-1/4" aria-label="Sidenav">
            <div class="pr-15 overflow-y-auto py-5 px-5 h-full bg-zinc-600 border-r border-gray-200 dark:bg-gray-800 dark:border-gray-700">
                <ul class="space-y-2">
                    <li>
                        <a id="quick-mode-btn"
                           data-url="@Url.Action("QuickMode", "Home")"
                           class="btn-yellow flex items-center p-2 text-base font-normal text-white rounded-lg dark:text-gray hover:bg-gray-100 dark:hover:bg-gray-700 group">
                            <i class="fa-solid fa-walkie-talkie" style="color: antiquewhite;"></i>
                            <span class="ml-3" style="color: antiquewhite;">Quick</span>

                        </a>
                        <a id="config-mode-btn" 
                            data-url="@Url.Action("ConfigurationsMode", "Home")" 
                            class="btn-yellow flex items-center p-2 text-base font-normal text-white rounded-lg dark:text-gray hover:bg-gray-100 dark:hover:bg-gray-700 group">
                            <i class="fa-solid fa-trowel-bricks flip-horizontal" style="color: antiquewhite;"></i>
                            <span class="ml-3" style="color: antiquewhite;">Configurations</span>
                        </a>
                    </li>
                </ul>
            </div>
        </aside>

        <div id="mode-partial-container" class="main-container flex-grow p-4 transition-all duration-300">
            @await Html.PartialAsync("~/Views/Shared/_QuickModePartial.cshtml", @Model.GenerationSettings)
        </div>

        <div class="main-container w-full flex-grow p-4 bg-zinc-200 dark:bg-zinc-700 transition-all duration-300">
            <div class="tabs flex border-b">
                <button class="btn-yellow tab tab-container tab-active bg-blue-500 text-white"
                        id="currentButton"
                        data-url="@Url.Action("OutputCurrent", "Home", new { currentImageUrl = Model.ImageUrl })">
                    Current
                </button>
                <button class="btn-yellow tab tab-container dark:bg-zinc-600 text-zinc-900"
                        id="overviewButton"
                        data-url="@Url.Action("OutputOverview", "Home")">
                    Overview
                </button>
            </div>
            <br />
            <div id="output-partial-container" class="tab-container tab-content mt-4">
                @await Html.PartialAsync("~/Views/Shared/_OutputCurrentPartial.cshtml", @Model.ImageUrl)
            </div>
        </div>
    </div>
</div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script>
    $(document).ready(function () {
        function loadOutputPartialView(url) {
            $.ajax({
                url: url,
                type: 'GET',
                success: function (data) {
                    document.getElementById("output-partial-container").innerHTML = data;
                },
                error: function (xhr, status, error) {
                    console.error("Error loading partial view: ", status, error);
                    document.getElementById("output-partial-container").innerHTML = "<p>An error occurred while loading the content. Please try again.</p>";
                }
            });
        }

        function loadModePartialView(url) {
            $.ajax({
                url: url,
                type: 'GET',
                success: function (data) {
                    document.getElementById("mode-partial-container").innerHTML = data;
                },
                error: function (xhr, status, error) {
                    console.error("Error loading partial view: ", status, error);
                    document.getElementById("mode-partial-container").innerHTML = "<p>An error occurred while loading the content. Please try again.</p>";
                }
            });
        }

        $("#currentButton, #overviewButton").on('click', function (e) {
            e.preventDefault();
            var url = $(this).data("url");
            loadOutputPartialView(url);
        });

        $("#quick-mode-btn, #config-mode-btn").on('click', function (e) {
            e.preventDefault();
            var url = $(this).data("url");
            loadModePartialView(url);
        });

        document.querySelectorAll('.tab').forEach(tab => {
            tab.addEventListener('click', () => {
                document.querySelectorAll('.tab').forEach(t => {
                    t.classList.remove('tab-active', 'bg-blue-500', 'text-white');
                    t.classList.add('bg-zinc-700', 'text-zinc-900');
                });
                tab.classList.add('tab-active', 'bg-blue-500', 'text-white');
            });
        });

        document.querySelector('#quick-request-form').addEventListener('submit', function (event) {
            
            event.preventDefault();
            
            var submitButton = document.getElementById('generate-submit-button');
            
            submitButton.innerHTML = 'Generating...';
            submitButton.disabled = true; 
        
            const formData = new FormData(event.target);

            fetch('/Home/QuickRequest', {
                method: 'POST',
                body: new URLSearchParams(formData),
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                }
            })
            .then(response => {
                
                if (!response.ok) {

                    return response.json().then(data => {
                    
                        throw new Error(data.error || 'Unknown error occurred.');
                    });
                }

                return response.blob();
            })
            .then(blob => {

                const imageUrl = URL.createObjectURL(blob);
                document.getElementById("output-partial-container").innerHTML = 
                    '<div class="tab-pane active"><img class="rounded-lg shadow-lg" src="' + imageUrl + '"></img></div>';
                submitButton.innerHTML = 'Generate';
                submitButton.disabled = false;
            })
            .catch(error => {

                alert("An error occurred: " + error.message);
                console.log("Fetch error: ", error);
                submitButton.innerHTML = 'Generate';
                submitButton.disabled = false;
            });
        });
    });
</script>


<style>
    .main-container {
        margin: 0 1rem;
        padding: 1.5em;
        width: 100%;
    }
</style>
